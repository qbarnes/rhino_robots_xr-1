00100	;      ; Written by Quentin Barnes
00110	;	     1023 Frederick Street
00120	;	     Chester, IL 62233
00130	;	     (618) 826-4743
00140	;
00150	; Machine language routine to be meant to be called from
00160	; a BASIC program.  The information is passed via an
00170	; integer array that is 8 x (2-32767).  The first 8 rows
00180	; are for passing control information.  (0,0) has
00190	; mode info and (1,0) has the data as to what motors
00200	; to work on.  Bit 0 corresponds to motor A, bit 1 to
00210	; motor B, etc.
00220	;
00230	;	1-32767:  The program will execute that many
00240	;		  moves before terminating unless a
00250	;		  move for all motors is 0 then the
00260	;		  program will return.  All other info
00270	;		  in the control row is ignored.
00280	;
00290	;	      0:  Execute all moves until a move with
00300	;		  all 0's is found.
00310	;
00320	;	   -128:  Request info (send an "I" to the Rhino
00330	;		  controller.)
00340	;	     -1:  Home the motors indicated in (1,0)
00350	;
00360	;
00370	;	     -2:  Send an 'X' to the motors indicated in
00380	;		  (1,0).
00390	;
00400	;	     -3:  Send a '?' for the motor indicated in
00410	;		  (1,0).
00420	;
00430	; In the rest of the array, column 0 corresponds to
00440	; motor A, column 1 to motor B, etc.  Load the array
00450	; rows 1-32767 with the number of steps for that motor
00460	; to step in that move.  A value between -200 and 200
00470	; is typical.
00480	;
00490	; To pass the array's location to this program, the
00500	; BASIC program should do a:
00510	; 'USR(VARPTR(ARRAY(0,0)))'
00520	; On return a value of '-1' indicates that everything
00530	; worked.  Any other value is the row that the error
00540	; occurred in.
00550	;
00560	NSTEPS	DEFL	8
00570	NMTRS	DEFL	8
00580	BASRET	DEFL	0A9AH
00590	CR	DEFL	0DH
00600	LF	DEFL	0AH
00610	ASCBB	DEFL	4130H
00620	SPCHAR	DEFL	20H
00630	MAX	DEFL	85
00640	RESC	DEFL	10
00650	RNUM	DEFL	15
00660		ORG	0C000H-128
00670		DEFS	128	; Space for program stack
00680	NEWSP	JP	KBLP	; Jump vector for KBoard routine
00690		CALL	0A7FH	; Get VARPTR info
00700		LD	(HLSAVE),HL	; Save VARPTR
00710		DI		; Turn off RS-232 interrupts
00720		OUT	(0E8H),A	; Clear junk info
00730		LD	(SPSAVE),SP	; Save BASIC's stack ptr
00740		LD	SP,NEWSP	; INIT own stack ptr
00750		INC	HL	; Point to LSB of (0,0)
00760		BIT	7,(HL)	; Test for negative value
00770		JP	NZ,SPCODE
00780		LD	B,(HL)	; Put count in BC
00790		DEC	HL
00800		LD	C,(HL)	; BC=ARRAY(0,0)
00810	MAINLP	LD	DE,16
00820		ADD	HL,DE	; Move pointer to first move
00830		PUSH	BC
00840		PUSH	HL
00850		CALL	SMOVE	; Do a move
00860		POP	HL
00870		POP	BC
00880		JP	Z,GEXIT ; All steps zero?
00890		DEC	BC	; Decrement count
00900		JR	MAINLP
00910	SPSAVE	DEFW	0
00920	HLSAVE	DEFW	0
00930	;
00940	; HL points to move location
00950	SMOVE	PUSH	HL
00960		CALL	ZEROC	; Check to see if all steps=0
00970		POP	HL
00980		RET	Z	; Carry flag also reset
00990		LD	DE,MBUF	; Move motor steps into buffer
01000		LD	BC,16
01010		LDIR		; Move it!
01020	SMLPX	LD	IY,MBUF
01030		LD	B,NSTEPS
01040	SLP1	XOR	A
01050		LD	L,(IY)	; Put step count in HL
01060		LD	H,(IY+1)
01070		OR	H	; Start test for 0 step
01080		JR	NZ,NOZ
01090		OR	L
01100		JR	NZ,NOZ
01110		JR	PASS1
01120	NOZ	XOR	A	; LD A,0
01130		LD	(IY),A	; Zero step count
01140		LD	(IY+1),A
01150		PUSH	HL	; Put DE<-HL
01160		POP	DE
01170		BIT	7,H	; Check if negative
01180		JR	Z,POSV1
01190		CALL	CPLHL	; Make negative value +
01200	POSV1	XOR	A
01210		CP	H
01220		JR	NZ,BIG
01230		LD	A,MAX
01240		CP	L
01250		JR	NC,SMALL
01260	BIG	PUSH	DE
01270		POP	HL
01280		BIT	7,H
01290		JR	Z,POSV2
01300		LD	DE,MAX
01310		JR	PASS9
01320	POSV2	LD	DE,-MAX
01330	PASS9	ADD	HL,DE
01340		LD	(IY),L	; Save undone motor steps
01350		LD	(IY+1),H
01360		PUSH	DE
01370		POP	HL
01380		CALL	CPLHL
01390		PUSH	HL
01400		POP	DE
01410	SMALL	PUSH	DE
01420		POP	HL
01430		PUSH	BC
01440		LD	A,'I'
01450		SUB	B
01460		LD	(ASAVE),A	; Save Mtr for STOP
01470		CALL	SSTEP
01480		CALL	Z,STOP
01490		POP	BC
01500	PASS1	INC	IY	; Point to next step
01510		INC	IY
01520		DJNZ	SLP1
01530		LD	HL,MBUF
01540		CALL	ZEROC
01550		JR	NZ,SMLPX ; Reloop if still steps left
01560		XOR	A	; Set Z=0
01570		CP	1
01580		RET
01590	MBUF	DEFS	NSTEPS+NSTEPS
01600	;
01610	; A has ASCII motor value
01620	; L has distance to move
01630	; Max HL value is 127
01640	; On return, if motor is stuck Z flag is set
01650	SSTEP	LD	IX,CBUF
01660		LD	(IX),A	; Save motor in CBUF
01670		LD	(IX+1),'+' ; Default sign positive
01680		BIT	7,H	; Test for negativeness
01690		JR	Z,POSV
01700		CALL	RCHECK	; See if RESET is wanted
01710		RET	Z
01720		LD	(IX+1),'-'
01730		CALL	CPLHL
01740	POSV	PUSH	HL
01750		PUSH	HL
01760		CALL	BINASC	; Convert to ASCII
01770		POP	DE	; Put HL->DE
01780		LD	HL,ASCBB
01790	SLP2A	LD	A,(HL)	; Loop til char<>space
01800		INC	HL
01810		CP	SPCHAR
01820		JR	Z,SLP2A
01830		LD	IX,CBUF+2 ; Pt to number part of buffer
01840	SLP3	LD	(IX),A	; transfer number
01850		INC	IX
01860		OR	A	; Check to see if end-of-info
01870		JR	Z,HLP1
01880		LD	A,(HL)
01890		INC	HL
01900		JR	SLP3
01910	HLP1	POP	DE	; Put L->E
01920		LD	D,0DEH	; Any illegal '?' value
01930	HLP1A	CALL	SDELAY
01940		LD	IX,CBUF
01950		LD	A,(IX)
01960		CALL	SCHAR
01970		LD	A,'?'
01980		CALL	SCHAR
01990		CALL	GCHAR
02000		CP	D	; Motor stuck?
02010		RET	Z
02020		LD	D,A
02030		SUB	SPCHAR
02040		ADD	A,E
02050		CP	95	; Will current move overflow?
02060		JP	P,HLP1A	; if so, keep trying
02070		CALL	SBUF	; if not, send move
02080		XOR	A	; Reset Z flag
02090		CP	1
02100		RET
02110	DIST	DEFS	1
02120	;
02130	; See if step is = -32768.  if so RESET arm
02140	RCHECK	LD	A,128
02150		CP	H
02160		RET	NZ
02170		XOR	A
02180		CP	L
02190		RET	NZ
02200		CALL	RESET
02210		XOR	A	; Set Z flag
02220		RET
02230	SPCODE	LD	A,128
02240		DEC	HL	; -> @ LSB
02250		CP	(HL)
02260		JR	Z,INFO	; SEE IF 'I'
02270		LD	A,0FFH	; -1
02280		CP	(HL)
02290		JR	Z,RESET	; SEE IF MOTOR RESET
02300		DEC	A
02310		CP	(HL)
02320		JR	Z,XSEND	; SEE IF SEND X TO MOTORS
02330		DEC	A
02340		CP	(HL)
02350		JR	Z,MINFO	; GET INFO ON SPECIFIC MOTOR
02360		LD	HL,0	; ELSE SEND ERROR 0
02370		LD	HL,(SPSAVE)
02380		LD	SP,HL
02390		JP	BASRET
02400	;
02410	; Send 'I' to the Robot controller and return value
02420	; to USR call
02430	INFO	CALL	GETI
02440		LD	H,0
02450		LD	L,A
02460		LD	HL,(SPSAVE)
02470		LD	SP,HL
02480		JP	BASRET
02490	GETI	LD	A,'I'
02500		CALL	SCHAR
02510		CALL	GCHAR
02520		RET
02530	;
02540	; Reset motors requested in (1,0)
02550	RESET	CALL	RESE
02560		CALL	RESD
02570		CALL	RESF
02580		JP	GEXIT
02590	;
02600	; Send 'X' to the requested motors.
02610	XSEND	INC	HL
02620		INC	HL
02630		LD	A,(HL)
02640		LD	B,NMTRS
02650	SLP4	SLA	A
02660		JR	C,SX
02670		DJNZ	SLP4
02680		JP	GEXIT
02690	SX	PUSH	AF
02700		LD	A,40H
02710		ADD	A,B	; Turn count in B to ASCII
02720		CALL	SCHAR
02730		LD	A,'X'
02740		CALL	SCHAR
02750		POP	AF
02760		DJNZ	SLP4
02770		JP	GEXIT
02780	;
02790	; Send a '?' to the requested motor.
02800	MINFO	INC	HL
02810		INC	HL
02820		LD	A,(HL)
02830		LD	B,NMTRS
02840	SLP6	SLA	A
02850		JR	C,FMOTOR
02860		DJNZ	SLP6
02870		LD	HL,0
02880		LD	HL,(SPSAVE)
02890		LD	SP,HL
02900		JP	BASRET
02910	FMOTOR	LD	A,40H
02920		ADD	A,B
02930		CALL	SCHAR
02940		LD	A,'?'
02950		CALL	SCHAR
02960		CALL	GCHAR
02970		LD	H,0
02980		LD	L,A
02990		LD	HL,(SPSAVE)
03000		LD	SP,HL
03010		EI
03020		JP	BASRET
03030	;
03040	; Reset motor requested in Reg A.  8=H, 3=C
03050	; Reg A,B,C,D are destroyed.
03060	RESE	CALL	GETI
03070		BIT	2,A
03080		LD	A,'E'
03090		LD	(ASAVE),A
03100		LD	A,4
03110		LD	(MASK),A
03120		CALL	NZ,FINDMS	; ON SWITCH?
03130		CALL	RMOVE
03140		RET
03150	;
03160	RESD	CALL	GETI
03170		BIT	1,A
03180		LD	A,'D'
03190		LD	(ASAVE),A
03200		LD	A,2
03210		LD	(MASK),A
03220		CALL	NZ,FINDMS
03230		CALL	RMOVE
03240		RET
03250	;
03260	RESF	CALL	GETI
03270		BIT	3,A
03280		LD	A,'F'
03290		LD	(ASAVE),A
03300		LD	A,8
03310		LD	(MASK),A
03320		CALL	NZ,FINDMS
03330		CALL	RMOVE
03340		CALL	FBASE
03350		RET
03360	;
03370	RMOVE	LD	HL,-1
03380		CALL	FEDGE
03390		LD	HL,20
03400		LD	A,(ASAVE)
03410		CALL	SSTEP
03420		CALL	SDELAY
03430		CALL	SDELAY
03440		CALL	SDELAY
03450		LD	HL,1
03460		CALL	FEDGE
03470		LD	A,20
03480		ADD	A,B
03490		SRL	A	; /2
03500		LD	L,A
03510		LD	H,0
03520		CALL	CPLHL
03530		LD	A,(ASAVE)
03540		CALL	SSTEP
03550		RET
03560	;
03570	; HL HAS SIGNED DISTANCE, (ASAVE)=MOTOR
03580	; (MASK)=MASK.  ON RET B HAS COUNT
03590	FEDGE	LD	B,0
03600	FELP1	PUSH	HL
03610		PUSH	BC
03620		LD	A,(ASAVE)
03630		CALL	SSTEP
03640		CALL	GETI
03650		POP	BC
03660		POP	HL
03670		LD	D,A
03680		LD	A,(MASK)
03690		AND	D
03700		RET	NZ
03710		INC	B
03720		JR	FELP1
03730	;
03740	; FIND MOTOR SWITCH
03750	; (ASAVE)=MOTOR, ON RET MOTOR IS ON SWITCH
03760	FINDMS	LD	B,25
03770	FMSLP	LD	(BCSAVE),BC
03780		LD	HL,-50
03790		LD	(HLSAV2),HL
03800		LD	A,(ASAVE)
03810		CALL	SSTEP
03820		JR	Z,FPOS
03830		CALL	FCHECK
03840		LD	BC,(BCSAVE)
03850		RET	Z
03860		DJNZ	FMSLP
03870	FPOS	LD	HL,50
03880		LD	(HLSAV2),HL
03890		LD	A,(ASAVE)
03900		CALL	SSTEP
03910		RET	Z	; SHOULD NEVER HAPPEN
03920		CALL	FCHECK
03930		JR	NZ,FPOS
03940		RET
03950	BCSAVE	DEFW	0
03960	;
03970	; Z=1 IF ON SWITCH
03980	FCHECK	CALL	GETI
03990		LD	B,A
04000		LD	A,(MASK)
04010		AND	B
04020		LD	A,(ASAVE)
04030		PUSH	AF
04040		CALL	Z,STOP
04050		CP	'E'
04060		CALL	Z,MOVED
04070		POP	AF
04080		RET
04090	;
04100	; MOVE THE D MOTOR
04110	MOVED	LD	HL,(HLSAV2)
04120		CALL	CPLHL
04130		LD	A,'D'
04140		CALL	SSTEP
04150		RET
04160	HLSAV2	DEFW	0
04170	;
04180	; ADJUST THE BASE
04190	FBASE	LD	HL,(HLSAVE)
04200		LD	DE,16
04210		ADD	HL,DE
04220		XOR	A
04230		LD	B,16
04240	FB1	LD	(HL),A	; ZERO MOVE BUFFER
04250		INC	HL
04260		DJNZ	FB1
04270		LD	HL,(HLSAVE)
04280		INC	HL
04290		INC	HL
04300		INC	HL
04310		INC	HL
04320		LD	C,(HL)
04330		INC	HL
04340		LD	B,(HL)
04350		LD	DE,5+16	; POINT TO F MOTOR STEP
04360		ADD	HL,DE
04370		LD	(HL),C
04380		INC	HL
04390		LD	(HL),B
04400		LD	HL,(HLSAVE)
04410		LD	DE,16
04420		ADD	HL,DE
04430		CALL	SMOVE
04440		RET
04450	;
04460	STOP	LD	A,(ASAVE)
04470		CALL	SCHAR
04480		LD	A,'X'
04490		CALL	SCHAR
04500		RET
04510	ASAVE	DEFS	1
04520	ISAVE	DEFS	1
04530	MASK	DEFS	1
04540	;
04550	; Exit to return a '-1' to BASIC's USR.
04560	GEXIT	LD	HL,(SPSAVE)	; Restore BASIC's stack
04570		LD	SP,HL
04580		LD	HL,-1
04590		EI
04600		JP	BASRET
04610	;
04620	; SENDS CHAR IN A TO RS-232 PORT
04630	;
04640	SCHAR	EX	AF,AF'
04650	LPSC1	IN	A,(0EAH)
04660		BIT	6,A
04670		JR	Z,LPSC1
04680		EX	AF,AF'
04690		OUT	(0EBH),A
04700	;	CP	1FH
04710	;	CALL	P,033AH
04720		RET
04730	;
04740	; GETS CHAR FROM RS-232
04750	;
04760	GCHAR	IN	A,(0EAH)
04770		BIT	7,A
04780		JR	Z,GCHAR
04790		IN	A,(0EBH)
04800		RET
04810	;
04820	; Send a line of chars pointed to by IX until a 0 is
04830	; found.
04840	SBUF	LD	IX,CBUF
04850	SBLP1	LD	A,(IX)
04860		INC	IX
04870		OR	A
04880		JR	Z,SBS
04890		CALL	SCHAR
04900		JR	SBLP1
04910	SBS	LD	A,CR
04920		CALL	SCHAR
04930		RET
04940	CBUF	DEFS	5
04950		DEFB	0
04960	BINASC	CALL	0A9AH	; Save value in FPA1
04970		CALL	0FBDH	; Convert to ASCII
04980		RET
04990	;
05000	; Check to see if HL-> all zeros for BC length
05010	; if yes, zero flag = 1
05020	; BC & HL lost
05030	ZEROC	LD	B,16
05040	ZLP	LD	A,(HL)
05050		INC	HL
05060		CP	0
05070		RET	NZ
05080		DJNZ	ZLP
05090		CP	A	; Set zero flag
05100		RET
05110	CPLHL	LD	A,H
05120		CPL
05130		LD	H,A
05140		LD	A,L
05150		CPL
05160		LD	L,A
05170		INC	HL
05180		RET
05190	;
05200	; A is lost
05210	SDELAY	PUSH	BC
05220		LD	BC,0500H
05230		CALL	0060H
05240		POP	BC
05250		RET
05260	KBLP	CALL	KEYSCN
05270		CP	'X'
05280		RET	Z
05290		CP	'Z'
05300		JR	NC,KBLP
05310		SUB	68
05320		JR	C,KBLP
05330		LD	D,0
05340		LD	E,A
05350		LD	HL,MTABLE
05360		ADD	HL,DE
05370		LD	A,(HL)
05380		OR	A
05390		JR	Z,KBLP
05400		LD	HL,15
05410		BIT	7,A
05420		PUSH	AF
05430		CALL	NZ,CPLHL
05440		POP	AF
05450		RES	7,A
05460		LD	(ASAVE),A	; For STOP call
05470		CALL	SSTEP
05480		CALL	Z,STOP
05490		JR	KBLP
05500	MTABLE	DEFB	'G'+128	;D
05510		DEFB	'G'
05520		DEFB	'F'+128
05530		DEFB	'E'	;G
05540		DEFB	'D'+128
05550		DEFB	'B'
05560		DEFB	'C'+128	;J
05570		DEFB	'B'+128
05580		DEFB	'A'
05590		DEFB	0	;M
05600		DEFB	0
05610		DEFB	'A'+128
05620		DEFB	0	;P
05630		DEFB	0
05640		DEFB	'F'
05650		DEFB	'H'+128	;S
05660		DEFB	'E'+128
05670		DEFB	'C'
05680		DEFB	0	;V
05690		DEFB	'H'
05700		DEFB	0
05710		DEFB	'D'	;Y
05720	KEYSCN	LD	HL,4036H
05730		LD	B,7
05740		XOR	A
05750	KLP1	LD	(HL),A
05760		INC	HL
05770		DJNZ	KLP1
05780	KBRL	CALL	002BH
05790		OR	A
05800		JR	Z,KBRL
05810		RET
05820		END	402DH
