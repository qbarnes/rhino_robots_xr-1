°°±°°	;      ; Written by Quentin Barnes°°±±°	;	     1023 Frederick Street°°±²°	;	     Chester, IL 62233°°±³°	;	     (618) 826-4743°°±´°	;°°±µ°	; Machine language routine to be meant to be called from°°±¶°	; a BASIC program.  The information is passed via an°°±·°	; integer array that is 8 x (2-32767).  The first 8 rows°°±¸°	; are for passing control information.  (0,0) has°°±¹°	; mode info and (1,0) has the data as to what motors°°²°°	; to work on.  Bit 0 corresponds to motor A, bit 1 to°°²±°	; motor B, etc.°°²²°	;°°²³°	;	1-32767:  The program will execute that many°°²´°	;		  moves before terminating unless a°°²µ°	;		  move for all motors is 0 then the°°²¶°	;		  program will return.  All other info°°²·°	;		  in the control row is ignored.°°²¸°	;°°²¹°	;	      0:  Execute all moves until a move with°°³°°	;		  all 0's is found.°°³±°	;°°³²°	;	   -128:  Request info (send an "I" to the Rhino°°³³°	;		  controller.)°°³´°	;	     -1:  Home the motors indicated in (1,0)°°³µ°	;°°³¶°	;°°³·°	;	     -2:  Send an 'X' to the motors indicated in°°³¸°	;		  (1,0).°°³¹°	;°°´°°	;	     -3:  Send a '?' for the motor indicated in°°´±°	;		  (1,0).°°´²°	;°°´³°	; In the rest of the array, column 0 corresponds to°°´´°	; motor A, column 1 to motor B, etc.  Load the array°°´µ°	; rows 1-32767 with the number of steps for that motor°°´¶°	; to step in that move.  A value between -200 and 200°°´·°	; is typical.°°´¸°	;°°´¹°	; To pass the array's location to this program, the°°µ°°	; BASIC program should do a:°°µ±°	; 'USR(VARPTR(ARRAY(0,0)))'°°µ²°	; On return a value of '-1' indicates that everything°°µ³°	; worked.  Any other value is the row that the error°°µ´°	; occurred in.°°µµ°	;°°µ¶°	NSTEPS	DEFL	8°°µ·°	NMTRS	DEFL	8°°µ¸°	BASRET	DEFL	0A9AH°°µ¹°	CR	DEFL	0DH°°¶°°	LF	DEFL	0AH°°¶±°	ASCBB	DEFL	4130H°°¶²°	SPCHAR	DEFL	20H°°¶³°	MAX	DEFL	85°°¶´°	RESC	DEFL	10°°¶µ°	RNUM	DEFL	15°°¶¶°		ORG	0C000H-128°°¶·°		DEFS	128	; Space for program stack°°¶¸°	NEWSP	JP	KBLP	; Jump vector for KBoard routine°°¶¹°		CALL	0A7FH	; Get VARPTR info°°·°°		LD	(HLSAVE),HL	; Save VARPTR°°·±°		DI		; Turn off RS-232 interrupts°°·²°		OUT	(0E8H),A	; Clear junk info°°·³°		LD	(SPSAVE),SP	; Save BASIC's stack ptr°°·´°		LD	SP,NEWSP	; INIT own stack ptr°°·µ°		INC	HL	; Point to LSB of (0,0)°°·¶°		BIT	7,(HL)	; Test for negative value°°··°		JP	NZ,SPCODE°°·¸°		LD	B,(HL)	; Put count in BC°°·¹°		DEC	HL°°¸°°		LD	C,(HL)	; BC=ARRAY(0,0)°°¸±°	MAINLP	LD	DE,16°°¸²°		ADD	HL,DE	; Move pointer to first move°°¸³°		PUSH	BC°°¸´°		PUSH	HL°°¸µ°		CALL	SMOVE	; Do a move°°¸¶°		POP	HL°°¸·°		POP	BC°°¸¸°		JP	Z,GEXIT ; All steps zero?°°¸¹°		DEC	BC	; Decrement count°°¹°°		JR	MAINLP°°¹±°	SPSAVE	DEFW	0°°¹²°	HLSAVE	DEFW	0°°¹³°	;°°¹´°	; HL points to move location°°¹µ°	SMOVE	PUSH	HL°°¹¶°		CALL	ZEROC	; Check to see if all steps=0°°¹·°		POP	HL°°¹¸°		RET	Z	; Carry flag also reset°°¹¹°		LD	DE,MBUF	; Move motor steps into buffer°±°°°		LD	BC,16°±°±°		LDIR		; Move it!°±°²°	SMLPX	LD	IY,MBUF°±°³°		LD	B,NSTEPS°±°´°	SLP1	XOR	A°±°µ°		LD	L,(IY)	; Put step count in HL°±°¶°		LD	H,(IY+1)°±°·°		OR	H	; Start test for 0 step°±°¸°		JR	NZ,NOZ°±°¹°		OR	L°±±°°		JR	NZ,NOZ°±±±°		JR	PASS1°±±²°	NOZ	XOR	A	; LD A,0°±±³°		LD	(IY),A	; Zero step count°±±´°		LD	(IY+1),A°±±µ°		PUSH	HL	; Put DE<-HL°±±¶°		POP	DE°±±·°		BIT	7,H	; Check if negative°±±¸°		JR	Z,POSV1°±±¹°		CALL	CPLHL	; Make negative value +°±²°°	POSV1	XOR	A°±²±°		CP	H°±²²°		JR	NZ,BIG°±²³°		LD	A,MAX°±²´°		CP	L°±²µ°		JR	NC,SMALL°±²¶°	BIG	PUSH	DE°±²·°		POP	HL°±²¸°		BIT	7,H°±²¹°		JR	Z,POSV2°±³°°		LD	DE,MAX°±³±°		JR	PASS9°±³²°	POSV2	LD	DE,-MAX°±³³°	PASS9	ADD	HL,DE°±³´°		LD	(IY),L	; Save undone motor steps°±³µ°		LD	(IY+1),H°±³¶°		PUSH	DE°±³·°		POP	HL°±³¸°		CALL	CPLHL°±³¹°		PUSH	HL°±´°°		POP	DE°±´±°	SMALL	PUSH	DE°±´²°		POP	HL°±´³°		PUSH	BC°±´´°		LD	A,'I'°±´µ°		SUB	B°±´¶°		LD	(ASAVE),A	; Save Mtr for STOP°±´·°		CALL	SSTEP°±´¸°		CALL	Z,STOP°±´¹°		POP	BC°±µ°°	PASS1	INC	IY	; Point to next step°±µ±°		INC	IY°±µ²°		DJNZ	SLP1°±µ³°		LD	HL,MBUF°±µ´°		CALL	ZEROC°±µµ°		JR	NZ,SMLPX ; Reloop if still steps left°±µ¶°		XOR	A	; Set Z=0°±µ·°		CP	1°±µ¸°		RET°±µ¹°	MBUF	DEFS	NSTEPS+NSTEPS°±¶°°	;°±¶±°	; A has ASCII motor value°±¶²°	; L has distance to move°±¶³°	; Max HL value is 127°±¶´°	; On return, if motor is stuck Z flag is set°±¶µ°	SSTEP	LD	IX,CBUF°±¶¶°		LD	(IX),A	; Save motor in CBUF°±¶·°		LD	(IX+1),'+' ; Default sign positive°±¶¸°		BIT	7,H	; Test for negativeness°±¶¹°		JR	Z,POSV°±·°°		CALL	RCHECK	; See if RESET is wanted°±·±°		RET	Z°±·²°		LD	(IX+1),'-'°±·³°		CALL	CPLHL°±·´°	POSV	PUSH	HL°±·µ°		PUSH	HL°±·¶°		CALL	BINASC	; Convert to ASCII°±··°		POP	DE	; Put HL->DE°±·¸°		LD	HL,ASCBB°±·¹°	SLP2A	LD	A,(HL)	; Loop til char<>space°±¸°°		INC	HL°±¸±°		CP	SPCHAR°±¸²°		JR	Z,SLP2A°±¸³°		LD	IX,CBUF+2 ; Pt to number part of buffer°±¸´°	SLP3	LD	(IX),A	; transfer number°±¸µ°		INC	IX°±¸¶°		OR	A	; Check to see if end-of-info°±¸·°		JR	Z,HLP1°±¸¸°		LD	A,(HL)°±¸¹°		INC	HL°±¹°°		JR	SLP3°±¹±°	HLP1	POP	DE	; Put L->E°±¹²°		LD	D,0DEH	; Any illegal '?' value°±¹³°	HLP1A	CALL	SDELAY°±¹´°		LD	IX,CBUF°±¹µ°		LD	A,(IX)°±¹¶°		CALL	SCHAR°±¹·°		LD	A,'?'°±¹¸°		CALL	SCHAR°±¹¹°		CALL	GCHAR°²°°°		CP	D	; Motor stuck?°²°±°		RET	Z°²°²°		LD	D,A°²°³°		SUB	SPCHAR°²°´°		ADD	A,E°²°µ°		CP	95	; Will current move overflow?°²°¶°		JP	P,HLP1A	; if so, keep trying°²°·°		CALL	SBUF	; if not, send move°²°¸°		XOR	A	; Reset Z flag°²°¹°		CP	1°²±°°		RET°²±±°	DIST	DEFS	1°²±²°	;°²±³°	; See if step is = -32768.  if so RESET arm°²±´°	RCHECK	LD	A,128°²±µ°		CP	H°²±¶°		RET	NZ°²±·°		XOR	A°²±¸°		CP	L°²±¹°		RET	NZ°²²°°		CALL	RESET°²²±°		XOR	A	; Set Z flag°²²²°		RET°²²³°	SPCODE	LD	A,128°²²´°		DEC	HL	; -> @ LSB°²²µ°		CP	(HL)°²²¶°		JR	Z,INFO	; SEE IF 'I'°²²·°		LD	A,0FFH	; -1°²²¸°		CP	(HL)°²²¹°		JR	Z,RESET	; SEE IF MOTOR RESET°²³°°		DEC	A°²³±°		CP	(HL)°²³²°		JR	Z,XSEND	; SEE IF SEND X TO MOTORS°²³³°		DEC	A°²³´°		CP	(HL)°²³µ°		JR	Z,MINFO	; GET INFO ON SPECIFIC MOTOR°²³¶°		LD	HL,0	; ELSE SEND ERROR 0°²³·°		LD	HL,(SPSAVE)°²³¸°		LD	SP,HL°²³¹°		JP	BASRET°²´°°	;°²´±°	; Send 'I' to the Robot controller and return value°²´²°	; to USR call°²´³°	INFO	CALL	GETI°²´´°		LD	H,0°²´µ°		LD	L,A°²´¶°		LD	HL,(SPSAVE)°²´·°		LD	SP,HL°²´¸°		JP	BASRET°²´¹°	GETI	LD	A,'I'°²µ°°		CALL	SCHAR°²µ±°		CALL	GCHAR°²µ²°		RET°²µ³°	;°²µ´°	; Reset motors requested in (1,0)°²µµ°	RESET	CALL	RESE°²µ¶°		CALL	RESD°²µ·°		CALL	RESF°²µ¸°		JP	GEXIT°²µ¹°	;°²¶°°	; Send 'X' to the requested motors.°²¶±°	XSEND	INC	HL°²¶²°		INC	HL°²¶³°		LD	A,(HL)°²¶´°		LD	B,NMTRS°²¶µ°	SLP4	SLA	A°²¶¶°		JR	C,SX°²¶·°		DJNZ	SLP4°²¶¸°		JP	GEXIT°²¶¹°	SX	PUSH	AF°²·°°		LD	A,40H°²·±°		ADD	A,B	; Turn count in B to ASCII°²·²°		CALL	SCHAR°²·³°		LD	A,'X'°²·´°		CALL	SCHAR°²·µ°		POP	AF°²·¶°		DJNZ	SLP4°²··°		JP	GEXIT°²·¸°	;°²·¹°	; Send a '?' to the requested motor.°²¸°°	MINFO	INC	HL°²¸±°		INC	HL°²¸²°		LD	A,(HL)°²¸³°		LD	B,NMTRS°²¸´°	SLP6	SLA	A°²¸µ°		JR	C,FMOTOR°²¸¶°		DJNZ	SLP6°²¸·°		LD	HL,0°²¸¸°		LD	HL,(SPSAVE)°²¸¹°		LD	SP,HL°²¹°°		JP	BASRET°²¹±°	FMOTOR	LD	A,40H°²¹²°		ADD	A,B°²¹³°		CALL	SCHAR°²¹´°		LD	A,'?'°²¹µ°		CALL	SCHAR°²¹¶°		CALL	GCHAR°²¹·°		LD	H,0°²¹¸°		LD	L,A°²¹¹°		LD	HL,(SPSAVE)°³°°°		LD	SP,HL°³°±°		EI°³°²°		JP	BASRET°³°³°	;°³°´°	; Reset motor requested in Reg A.  8=H, 3=C°³°µ°	; Reg A,B,C,D are destroyed.°³°¶°	RESE	CALL	GETI°³°·°		BIT	2,A°³°¸°		LD	A,'E'°³°¹°		LD	(ASAVE),A°³±°°		LD	A,4°³±±°		LD	(MASK),A°³±²°		CALL	NZ,FINDMS	; ON SWITCH?°³±³°		CALL	RMOVE°³±´°		RET°³±µ°	;°³±¶°	RESD	CALL	GETI°³±·°		BIT	1,A°³±¸°		LD	A,'D'°³±¹°		LD	(ASAVE),A°³²°°		LD	A,2°³²±°		LD	(MASK),A°³²²°		CALL	NZ,FINDMS°³²³°		CALL	RMOVE°³²´°		RET°³²µ°	;°³²¶°	RESF	CALL	GETI°³²·°		BIT	3,A°³²¸°		LD	A,'F'°³²¹°		LD	(ASAVE),A°³³°°		LD	A,8°³³±°		LD	(MASK),A°³³²°		CALL	NZ,FINDMS°³³³°		CALL	RMOVE°³³´°		CALL	FBASE°³³µ°		RET°³³¶°	;°³³·°	RMOVE	LD	HL,-1°³³¸°		CALL	FEDGE°³³¹°		LD	HL,20°³´°°		LD	A,(ASAVE)°³´±°		CALL	SSTEP°³´²°		CALL	SDELAY°³´³°		CALL	SDELAY°³´´°		CALL	SDELAY°³´µ°		LD	HL,1°³´¶°		CALL	FEDGE°³´·°		LD	A,20°³´¸°		ADD	A,B°³´¹°		SRL	A	; /2°³µ°°		LD	L,A°³µ±°		LD	H,0°³µ²°		CALL	CPLHL°³µ³°		LD	A,(ASAVE)°³µ´°		CALL	SSTEP°³µµ°		RET°³µ¶°	;°³µ·°	; HL HAS SIGNED DISTANCE, (ASAVE)=MOTOR°³µ¸°	; (MASK)=MASK.  ON RET B HAS COUNT°³µ¹°	FEDGE	LD	B,0°³¶°°	FELP1	PUSH	HL°³¶±°		PUSH	BC°³¶²°		LD	A,(ASAVE)°³¶³°		CALL	SSTEP°³¶´°		CALL	GETI°³¶µ°		POP	BC°³¶¶°		POP	HL°³¶·°		LD	D,A°³¶¸°		LD	A,(MASK)°³¶¹°		AND	D°³·°°		RET	NZ°³·±°		INC	B°³·²°		JR	FELP1°³·³°	;°³·´°	; FIND MOTOR SWITCH°³·µ°	; (ASAVE)=MOTOR, ON RET MOTOR IS ON SWITCH°³·¶°	FINDMS	LD	B,25°³··°	FMSLP	LD	(BCSAVE),BC°³·¸°		LD	HL,-50°³·¹°		LD	(HLSAV2),HL°³¸°°		LD	A,(ASAVE)°³¸±°		CALL	SSTEP°³¸²°		JR	Z,FPOS°³¸³°		CALL	FCHECK°³¸´°		LD	BC,(BCSAVE)°³¸µ°		RET	Z°³¸¶°		DJNZ	FMSLP°³¸·°	FPOS	LD	HL,50°³¸¸°		LD	(HLSAV2),HL°³¸¹°		LD	A,(ASAVE)°³¹°°		CALL	SSTEP°³¹±°		RET	Z	; SHOULD NEVER HAPPEN°³¹²°		CALL	FCHECK°³¹³°		JR	NZ,FPOS°³¹´°		RET°³¹µ°	BCSAVE	DEFW	0°³¹¶°	;°³¹·°	; Z=1 IF ON SWITCH°³¹¸°	FCHECK	CALL	GETI°³¹¹°		LD	B,A°´°°°		LD	A,(MASK)°´°±°		AND	B°´°²°		LD	A,(ASAVE)°´°³°		PUSH	AF°´°´°		CALL	Z,STOP°´°µ°		CP	'E'°´°¶°		CALL	Z,MOVED°´°·°		POP	AF°´°¸°		RET°´°¹°	;°´±°°	; MOVE THE D MOTOR°´±±°	MOVED	LD	HL,(HLSAV2)°´±²°		CALL	CPLHL°´±³°		LD	A,'D'°´±´°		CALL	SSTEP°´±µ°		RET°´±¶°	HLSAV2	DEFW	0°´±·°	;°´±¸°	; ADJUST THE BASE°´±¹°	FBASE	LD	HL,(HLSAVE)°´²°°		LD	DE,16°´²±°		ADD	HL,DE°´²²°		XOR	A°´²³°		LD	B,16°´²´°	FB1	LD	(HL),A	; ZERO MOVE BUFFER°´²µ°		INC	HL°´²¶°		DJNZ	FB1°´²·°		LD	HL,(HLSAVE)°´²¸°		INC	HL°´²¹°		INC	HL°´³°°		INC	HL°´³±°		INC	HL°´³²°		LD	C,(HL)°´³³°		INC	HL°´³´°		LD	B,(HL)°´³µ°		LD	DE,5+16	; POINT TO F MOTOR STEP°´³¶°		ADD	HL,DE°´³·°		LD	(HL),C°´³¸°		INC	HL°´³¹°		LD	(HL),B°´´°°		LD	HL,(HLSAVE)°´´±°		LD	DE,16°´´²°		ADD	HL,DE°´´³°		CALL	SMOVE°´´´°		RET°´´µ°	;°´´¶°	STOP	LD	A,(ASAVE)°´´·°		CALL	SCHAR°´´¸°		LD	A,'X'°´´¹°		CALL	SCHAR°´µ°°		RET°´µ±°	ASAVE	DEFS	1°´µ²°	ISAVE	DEFS	1°´µ³°	MASK	DEFS	1°´µ´°	;°´µµ°	; Exit to return a '-1' to BASIC's USR.°´µ¶°	GEXIT	LD	HL,(SPSAVE)	; Restore BASIC's stack°´µ·°		LD	SP,HL°´µ¸°		LD	HL,-1°´µ¹°		EI°´¶°°		JP	BASRET°´¶±°	;°´¶²°	; SENDS CHAR IN A TO RS-232 PORT°´¶³°	;°´¶´°	SCHAR	EX	AF,AF'°´¶µ°	LPSC1	IN	A,(0EAH)°´¶¶°		BIT	6,A°´¶·°		JR	Z,LPSC1°´¶¸°		EX	AF,AF'°´¶¹°		OUT	(0EBH),A°´·°°	;	CP	1FH°´·±°	;	CALL	P,033AH°´·²°		RET°´·³°	;°´·´°	; GETS CHAR FROM RS-232°´·µ°	;°´·¶°	GCHAR	IN	A,(0EAH)°´··°		BIT	7,A°´·¸°		JR	Z,GCHAR°´·¹°		IN	A,(0EBH)°´¸°°		RET°´¸±°	;°´¸²°	; Send a line of chars pointed to by IX until a 0 is°´¸³°	; found.°´¸´°	SBUF	LD	IX,CBUF°´¸µ°	SBLP1	LD	A,(IX)°´¸¶°		INC	IX°´¸·°		OR	A°´¸¸°		JR	Z,SBS°´¸¹°		CALL	SCHAR°´¹°°		JR	SBLP1°´¹±°	SBS	LD	A,CR°´¹²°		CALL	SCHAR°´¹³°		RET°´¹´°	CBUF	DEFS	5°´¹µ°		DEFB	0°´¹¶°	BINASC	CALL	0A9AH	; Save value in FPA1°´¹·°		CALL	0FBDH	; Convert to ASCII°´¹¸°		RET°´¹¹°	;°µ°°°	; Check to see if HL-> all zeros for BC length°µ°±°	; if yes, zero flag = 1°µ°²°	; BC & HL lost°µ°³°	ZEROC	LD	B,16°µ°´°	ZLP	LD	A,(HL)°µ°µ°		INC	HL°µ°¶°		CP	0°µ°·°		RET	NZ°µ°¸°		DJNZ	ZLP°µ°¹°		CP	A	; Set zero flag°µ±°°		RET°µ±±°	CPLHL	LD	A,H°µ±²°		CPL°µ±³°		LD	H,A°µ±´°		LD	A,L°µ±µ°		CPL°µ±¶°		LD	L,A°µ±·°		INC	HL°µ±¸°		RET°µ±¹°	;°µ²°°	; A is lost°µ²±°	SDELAY	PUSH	BC°µ²²°		LD	BC,0500H°µ²³°		CALL	0060H°µ²´°		POP	BC°µ²µ°		RET°µ²¶°	KBLP	CALL	KEYSCN°µ²·°		CP	'X'°µ²¸°		RET	Z°µ²¹°		CP	'Z'°µ³°°		JR	NC,KBLP°µ³±°		SUB	68°µ³²°		JR	C,KBLP°µ³³°		LD	D,0°µ³´°		LD	E,A°µ³µ°		LD	HL,MTABLE°µ³¶°		ADD	HL,DE°µ³·°		LD	A,(HL)°µ³¸°		OR	A°µ³¹°		JR	Z,KBLP°µ´°°		LD	HL,15°µ´±°		BIT	7,A°µ´²°		PUSH	AF°µ´³°		CALL	NZ,CPLHL°µ´´°		POP	AF°µ´µ°		RES	7,A°µ´¶°		LD	(ASAVE),A	; For STOP call°µ´·°		CALL	SSTEP°µ´¸°		CALL	Z,STOP°µ´¹°		JR	KBLP°µµ°°	MTABLE	DEFB	'G'+128	;D°µµ±°		DEFB	'G'°µµ²°		DEFB	'F'+128°µµ³°		DEFB	'E'	;G°µµ´°		DEFB	'D'+128°µµµ°		DEFB	'B'°µµ¶°		DEFB	'C'+128	;J°µµ·°		DEFB	'B'+128°µµ¸°		DEFB	'A'°µµ¹°		DEFB	0	;M°µ¶°°		DEFB	0°µ¶±°		DEFB	'A'+128°µ¶²°		DEFB	0	;P°µ¶³°		DEFB	0°µ¶´°		DEFB	'F'°µ¶µ°		DEFB	'H'+128	;S°µ¶¶°		DEFB	'E'+128°µ¶·°		DEFB	'C'°µ¶¸°		DEFB	0	;V°µ¶¹°		DEFB	'H'°µ·°°		DEFB	0°µ·±°		DEFB	'D'	;Y°µ·²°	KEYSCN	LD	HL,4036H°µ·³°		LD	B,7°µ·´°		XOR	A°µ·µ°	KLP1	LD	(HL),A°µ·¶°		INC	HL°µ··°		DJNZ	KLP1°µ·¸°	KBRL	CALL	002BH°µ·¹°		OR	A°µ¸°°		JR	Z,KBRL°µ¸±°		RET°µ¸²°		END	402DH